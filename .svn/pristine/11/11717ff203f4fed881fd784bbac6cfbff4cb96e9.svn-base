<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="fr">
<head>
<!-- Generated by javadoc (1.8.0_242) on Wed Apr 29 16:51:30 CEST 2020 -->
<title>Parallepipede</title>
<meta name="date" content="2020-04-29">
<link rel="stylesheet" type="text/css" href="../stylesheet.css" title="Style">
<script type="text/javascript" src="../script.js"></script>
</head>
<body>
<script type="text/javascript"><!--
    try {
        if (location.href.indexOf('is-external=true') == -1) {
            parent.document.title="Parallepipede";
        }
    }
    catch(err) {
    }
//-->
var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10,"i8":10,"i9":10,"i10":10,"i11":10};
var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a name="navbar.top">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.top.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../overview-summary.html">Overview</a></li>
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../deprecated-list.html">Deprecated</a></li>
<li><a href="../index-all.html">Index</a></li>
<li><a href="../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="../formes/Executable.html" title="class in formes"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
<li><a href="../formes/Plan.html" title="class in formes"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="../index.html?formes/Parallepipede.html" target="_top">Frames</a></li>
<li><a href="Parallepipede.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
<!-- ======== START OF CLASS DATA ======== -->
<div class="header">
<div class="subTitle">formes</div>
<h2 title="Class Parallepipede" class="title">Class Parallepipede</h2>
</div>
<div class="contentContainer">
<ul class="inheritance">
<li>java.lang.Object</li>
<li>
<ul class="inheritance">
<li>formes.Parallepipede</li>
</ul>
</li>
</ul>
<div class="description">
<ul class="blockList">
<li class="blockList">
<hr>
<br>
<pre>public class <span class="typeNameLabel">Parallepipede</span>
extends java.lang.Object</pre>
</li>
</ul>
</div>
<div class="summary">
<ul class="blockList">
<li class="blockList">
<!-- =========== FIELD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="field.summary">
<!--   -->
</a>
<h3>Field Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Field Summary table, listing fields, and an explanation">
<caption><span>Fields</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Field and Description</th>
</tr>
<tr class="altColor">
<td class="colFirst"><code>protected javafx.scene.paint.Color</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../formes/Parallepipede.html#coul">coul</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>protected <a href="../formes/Point.html" title="class in formes">Point</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../formes/Parallepipede.html#point_debut">point_debut</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>protected <a href="../formes/Point.html" title="class in formes">Point</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../formes/Parallepipede.html#point_fin">point_fin</a></span></code>&nbsp;</td>
</tr>
</table>
</li>
</ul>
<!-- ======== CONSTRUCTOR SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.summary">
<!--   -->
</a>
<h3>Constructor Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colOne" scope="col">Constructor and Description</th>
</tr>
<tr class="altColor">
<td class="colOne"><code><span class="memberNameLink"><a href="../formes/Parallepipede.html#Parallepipede-formes.Point-formes.Point-javafx.scene.paint.Color-">Parallepipede</a></span>(<a href="../formes/Point.html" title="class in formes">Point</a>&nbsp;point_debut,
             <a href="../formes/Point.html" title="class in formes">Point</a>&nbsp;point_fin,
             javafx.scene.paint.Color&nbsp;coul)</code>&nbsp;</td>
</tr>
</table>
</li>
</ul>
<!-- ========== METHOD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="method.summary">
<!--   -->
</a>
<h3>Method Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Method and Description</th>
</tr>
<tr id="i0" class="altColor">
<td class="colFirst"><code>double</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../formes/Parallepipede.html#calculdist-formes.Point-formes.Point-">calculdist</a></span>(<a href="../formes/Point.html" title="class in formes">Point</a>&nbsp;p,
          <a href="../formes/Point.html" title="class in formes">Point</a>&nbsp;q)</code>
<div class="block">la methode calculdist
 Cette méthode nous permet en faisant appel,
a la fonction calculLongueur de la classe Droite,
 de récupérer la distance entre deux points et ainsi,
la largeur et la hauteur du parallelepipède rectangle.</div>
</td>
</tr>
<tr id="i1" class="rowColor">
<td class="colFirst"><code><a href="../formes/Droite.html" title="class in formes">Droite</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../formes/Parallepipede.html#droiteNormal-formes.Point-">droiteNormal</a></span>(<a href="../formes/Point.html" title="class in formes">Point</a>&nbsp;pointLumiere)</code>
<div class="block">la methode droiteNormal
 Dans cette méthode, on calcul la droite normal d'un objet en un point.</div>
</td>
</tr>
<tr id="i2" class="altColor">
<td class="colFirst"><code><a href="../formes/Plan.html" title="class in formes">Plan</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../formes/Parallepipede.html#estDansFace-formes.Point-formes.Plan-formes.Point-">estDansFace</a></span>(<a href="../formes/Point.html" title="class in formes">Point</a>&nbsp;lumineux,
           <a href="../formes/Plan.html" title="class in formes">Plan</a>&nbsp;face,
           <a href="../formes/Point.html" title="class in formes">Point</a>&nbsp;quatrieme)</code>
<div class="block">la methode estDansFace
Comme le théoreme de Möller prend en compte que des triangles,
cette fonction permet de prendre en compte des faces entiers (une face étant composée de deux triangle).</div>
</td>
</tr>
<tr id="i3" class="rowColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../formes/Parallepipede.html#estDansMiFace-formes.Point-formes.Plan-">estDansMiFace</a></span>(<a href="../formes/Point.html" title="class in formes">Point</a>&nbsp;lumineux,
             <a href="../formes/Plan.html" title="class in formes">Plan</a>&nbsp;morceauFace)</code>
<div class="block">la methode estDansMiFace
 Premiere idée : Pour vérifier la présence d'un point sur une face, on prend un point qui sera l'origine et deux autre point.</div>
</td>
</tr>
<tr id="i4" class="altColor">
<td class="colFirst"><code>javafx.scene.paint.Color</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../formes/Parallepipede.html#getCoul--">getCoul</a></span>()</code>&nbsp;</td>
</tr>
<tr id="i5" class="rowColor">
<td class="colFirst"><code><a href="../formes/Point.html" title="class in formes">Point</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../formes/Parallepipede.html#getPointDebut--">getPointDebut</a></span>()</code>&nbsp;</td>
</tr>
<tr id="i6" class="altColor">
<td class="colFirst"><code><a href="../formes/Point.html" title="class in formes">Point</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../formes/Parallepipede.html#getPointFin--">getPointFin</a></span>()</code>&nbsp;</td>
</tr>
<tr id="i7" class="rowColor">
<td class="colFirst"><code><a href="../formes/Plan.html" title="class in formes">Plan</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../formes/Parallepipede.html#planIncid-formes.Point-">planIncid</a></span>(<a href="../formes/Point.html" title="class in formes">Point</a>&nbsp;pointLumiere)</code>
<div class="block">la methode planIncid
 On verifie si telle ou telle face du parallelepipede continent un point d'impact avec la droite lumiere
 si oui, on verifie la distance entre la source lumineuse et le point d'impact trouvé.</div>
</td>
</tr>
<tr id="i8" class="altColor">
<td class="colFirst"><code><a href="../formes/Point.html" title="class in formes">Point</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../formes/Parallepipede.html#pointIncid-formes.Point-">pointIncid</a></span>(<a href="../formes/Point.html" title="class in formes">Point</a>&nbsp;pointLumiere)</code>
<div class="block">la methode pointIncid
 On récupere le point d'incidence, c'est a dire, le point ou le rayon lumineux touche l'objet.</div>
</td>
</tr>
<tr id="i9" class="rowColor">
<td class="colFirst"><code><a href="../formes/Point.html" title="class in formes">Point</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../formes/Parallepipede.html#pointIntersect-formes.Droite-formes.Plan-">pointIntersect</a></span>(<a href="../formes/Droite.html" title="class in formes">Droite</a>&nbsp;lumiere,
              <a href="../formes/Plan.html" title="class in formes">Plan</a>&nbsp;plane)</code>
<div class="block">la methode pointIntersect
 Dans cette méthode, on calcul le point ou la lumière entre en contacte avec la forme.</div>
</td>
</tr>
<tr id="i10" class="altColor">
<td class="colFirst"><code><a href="../formes/Droite.html" title="class in formes">Droite</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../formes/Parallepipede.html#rayonIncidant-formes.Point-">rayonIncidant</a></span>(<a href="../formes/Point.html" title="class in formes">Point</a>&nbsp;lum)</code>
<div class="block">la methode rayonIncidant
 On recherche le point centrale de la forme,
Ici en cherchant le point de contact des diagonal interne du Parallelepipede rectangle.</div>
</td>
</tr>
<tr id="i11" class="rowColor">
<td class="colFirst"><code>java.util.ArrayList&lt;<a href="../formes/Point.html" title="class in formes">Point</a>&gt;</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../formes/Parallepipede.html#Sommet--">Sommet</a></span>()</code>&nbsp;</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.lang.Object">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
<code>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
<div class="details">
<ul class="blockList">
<li class="blockList">
<!-- ============ FIELD DETAIL =========== -->
<ul class="blockList">
<li class="blockList"><a name="field.detail">
<!--   -->
</a>
<h3>Field Detail</h3>
<a name="point_debut">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>point_debut</h4>
<pre>protected&nbsp;<a href="../formes/Point.html" title="class in formes">Point</a> point_debut</pre>
</li>
</ul>
<a name="point_fin">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>point_fin</h4>
<pre>protected&nbsp;<a href="../formes/Point.html" title="class in formes">Point</a> point_fin</pre>
</li>
</ul>
<a name="coul">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>coul</h4>
<pre>protected&nbsp;javafx.scene.paint.Color coul</pre>
</li>
</ul>
</li>
</ul>
<!-- ========= CONSTRUCTOR DETAIL ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.detail">
<!--   -->
</a>
<h3>Constructor Detail</h3>
<a name="Parallepipede-formes.Point-formes.Point-javafx.scene.paint.Color-">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>Parallepipede</h4>
<pre>public&nbsp;Parallepipede(<a href="../formes/Point.html" title="class in formes">Point</a>&nbsp;point_debut,
                     <a href="../formes/Point.html" title="class in formes">Point</a>&nbsp;point_fin,
                     javafx.scene.paint.Color&nbsp;coul)</pre>
</li>
</ul>
</li>
</ul>
<!-- ============ METHOD DETAIL ========== -->
<ul class="blockList">
<li class="blockList"><a name="method.detail">
<!--   -->
</a>
<h3>Method Detail</h3>
<a name="Sommet--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>Sommet</h4>
<pre>public&nbsp;java.util.ArrayList&lt;<a href="../formes/Point.html" title="class in formes">Point</a>&gt;&nbsp;Sommet()</pre>
</li>
</ul>
<a name="rayonIncidant-formes.Point-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>rayonIncidant</h4>
<pre>public&nbsp;<a href="../formes/Droite.html" title="class in formes">Droite</a>&nbsp;rayonIncidant(<a href="../formes/Point.html" title="class in formes">Point</a>&nbsp;lum)</pre>
<div class="block"><h1>la methode rayonIncidant</h1>
<p> On recherche le point centrale de la forme,
Ici en cherchant le point de contact des diagonal interne du Parallelepipede rectangle.
Pour cela on va avoir besoin de la representation parametrique des droites.
</p></div>
</li>
</ul>
<a name="estDansMiFace-formes.Point-formes.Plan-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>estDansMiFace</h4>
<pre>public&nbsp;boolean&nbsp;estDansMiFace(<a href="../formes/Point.html" title="class in formes">Point</a>&nbsp;lumineux,
                             <a href="../formes/Plan.html" title="class in formes">Plan</a>&nbsp;morceauFace)</pre>
<div class="block"><h1>la methode estDansMiFace</h1>
<p> Premiere idée : Pour vérifier la présence d'un point sur une face, on prend un point qui sera l'origine et deux autre point.
 le segment allant du point d'origine jusqu'au point second est l'axe des x et
celui du point d'origine au point ternaire est l'axe des y.
 Seconde idée : utiliser l'algorithme de Möller Trumbore, on divise la face carré en deux face triangulaires.
 et on calcul l'intersection d'un rayon avec un triangle,
si l'intersection est dans le triangle alors, on retourne vrai sinon, on retourne faux.
 Cette algorithme est utilisé dans le cas du lancé de rayon en infographie.(d'après wikipedia).
 J'ai donc ici repris l'algorithme de Möller Trumbore présent a cette adresse :
https://fr.wikipedia.org/wiki/Algorithme_d%27intersection_de_Möller–Trumbore et adapté a mon code(voir les commentaires).
</p></div>
</li>
</ul>
<a name="estDansFace-formes.Point-formes.Plan-formes.Point-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>estDansFace</h4>
<pre>public&nbsp;<a href="../formes/Plan.html" title="class in formes">Plan</a>&nbsp;estDansFace(<a href="../formes/Point.html" title="class in formes">Point</a>&nbsp;lumineux,
                        <a href="../formes/Plan.html" title="class in formes">Plan</a>&nbsp;face,
                        <a href="../formes/Point.html" title="class in formes">Point</a>&nbsp;quatrieme)</pre>
<div class="block"><h1>la methode estDansFace</h1>
<p>Comme le théoreme de Möller prend en compte que des triangles,
cette fonction permet de prendre en compte des faces entiers (une face étant composée de deux triangle).
</p></div>
</li>
</ul>
<a name="planIncid-formes.Point-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>planIncid</h4>
<pre>public&nbsp;<a href="../formes/Plan.html" title="class in formes">Plan</a>&nbsp;planIncid(<a href="../formes/Point.html" title="class in formes">Point</a>&nbsp;pointLumiere)</pre>
<div class="block"><h1>la methode planIncid</h1>
<p> On verifie si telle ou telle face du parallelepipede continent un point d'impact avec la droite lumiere
 si oui, on verifie la distance entre la source lumineuse et le point d'impact trouvé.
 On récupère le plan contenant le point avec la distance la plus petite et on le retourne.
</p></div>
</li>
</ul>
<a name="pointIncid-formes.Point-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>pointIncid</h4>
<pre>public&nbsp;<a href="../formes/Point.html" title="class in formes">Point</a>&nbsp;pointIncid(<a href="../formes/Point.html" title="class in formes">Point</a>&nbsp;pointLumiere)</pre>
<div class="block"><h1>la methode pointIncid</h1>
<p> On récupere le point d'incidence, c'est a dire, le point ou le rayon lumineux touche l'objet.
</p></div>
</li>
</ul>
<a name="pointIntersect-formes.Droite-formes.Plan-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>pointIntersect</h4>
<pre>public&nbsp;<a href="../formes/Point.html" title="class in formes">Point</a>&nbsp;pointIntersect(<a href="../formes/Droite.html" title="class in formes">Droite</a>&nbsp;lumiere,
                            <a href="../formes/Plan.html" title="class in formes">Plan</a>&nbsp;plane)</pre>
<div class="block"><h1>la methode pointIntersect</h1>
<p> Dans cette méthode, on calcul le point ou la lumière entre en contacte avec la forme.
        on va chercher le point d'impact de la droite (entre le centre du parallelepipede avec le point lumineux)
        et le plan représenté par la face du P.
</p></div>
</li>
</ul>
<a name="droiteNormal-formes.Point-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>droiteNormal</h4>
<pre>public&nbsp;<a href="../formes/Droite.html" title="class in formes">Droite</a>&nbsp;droiteNormal(<a href="../formes/Point.html" title="class in formes">Point</a>&nbsp;pointLumiere)</pre>
<div class="block"><h1>la methode droiteNormal</h1>
<p> Dans cette méthode, on calcul la droite normal d'un objet en un point.
        La droite normal d'un objet est une droite perpendiculaire a la face
        ou elle est calculer ici, on veut cette droite en un point particulier.
</p> On a un vecteur et un point pour la droite normal ainsi,
  on calcul un autre point en faisant les coordonnée du premier point - celle du vecteur.
</p></div>
</li>
</ul>
<a name="calculdist-formes.Point-formes.Point-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>calculdist</h4>
<pre>public&nbsp;double&nbsp;calculdist(<a href="../formes/Point.html" title="class in formes">Point</a>&nbsp;p,
                         <a href="../formes/Point.html" title="class in formes">Point</a>&nbsp;q)</pre>
<div class="block"><h1>la methode calculdist</h1>
<p> Cette méthode nous permet en faisant appel,
a la fonction calculLongueur de la classe Droite,
 de récupérer la distance entre deux points et ainsi,
la largeur et la hauteur du parallelepipède rectangle.
</p>
<p>En premier lieu on appel la fonction sommet() qu'ici je surnome listeP.
Pour récuperer la hauteur, on "remplace":
         - p  par listeP[2].
         - q par listeP[0].
Pour récuperer la largeur:
         - p  par listeP[1].
         - q listeP[0].</p></div>
</li>
</ul>
<a name="getPointDebut--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getPointDebut</h4>
<pre>public&nbsp;<a href="../formes/Point.html" title="class in formes">Point</a>&nbsp;getPointDebut()</pre>
</li>
</ul>
<a name="getPointFin--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getPointFin</h4>
<pre>public&nbsp;<a href="../formes/Point.html" title="class in formes">Point</a>&nbsp;getPointFin()</pre>
</li>
</ul>
<a name="getCoul--">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>getCoul</h4>
<pre>public&nbsp;javafx.scene.paint.Color&nbsp;getCoul()</pre>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<!-- ========= END OF CLASS DATA ========= -->
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a name="navbar.bottom">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.bottom.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../overview-summary.html">Overview</a></li>
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../deprecated-list.html">Deprecated</a></li>
<li><a href="../index-all.html">Index</a></li>
<li><a href="../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="../formes/Executable.html" title="class in formes"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
<li><a href="../formes/Plan.html" title="class in formes"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="../index.html?formes/Parallepipede.html" target="_top">Frames</a></li>
<li><a href="Parallepipede.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</body>
</html>
