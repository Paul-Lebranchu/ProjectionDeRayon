<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="fr">
<head>
<!-- Generated by javadoc (1.8.0_242) on Wed Apr 29 16:51:30 CEST 2020 -->
<title>Droite</title>
<meta name="date" content="2020-04-29">
<link rel="stylesheet" type="text/css" href="../stylesheet.css" title="Style">
<script type="text/javascript" src="../script.js"></script>
</head>
<body>
<script type="text/javascript"><!--
    try {
        if (location.href.indexOf('is-external=true') == -1) {
            parent.document.title="Droite";
        }
    }
    catch(err) {
    }
//-->
var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10,"i8":10,"i9":10};
var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a name="navbar.top">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.top.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../overview-summary.html">Overview</a></li>
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../deprecated-list.html">Deprecated</a></li>
<li><a href="../index-all.html">Index</a></li>
<li><a href="../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="../formes/Cylindre.html" title="class in formes"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
<li><a href="../formes/Executable.html" title="class in formes"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="../index.html?formes/Droite.html" target="_top">Frames</a></li>
<li><a href="Droite.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
<!-- ======== START OF CLASS DATA ======== -->
<div class="header">
<div class="subTitle">formes</div>
<h2 title="Class Droite" class="title">Class Droite</h2>
</div>
<div class="contentContainer">
<ul class="inheritance">
<li>java.lang.Object</li>
<li>
<ul class="inheritance">
<li>formes.Droite</li>
</ul>
</li>
</ul>
<div class="description">
<ul class="blockList">
<li class="blockList">
<hr>
<br>
<pre>public class <span class="typeNameLabel">Droite</span>
extends java.lang.Object</pre>
</li>
</ul>
</div>
<div class="summary">
<ul class="blockList">
<li class="blockList">
<!-- ======== CONSTRUCTOR SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.summary">
<!--   -->
</a>
<h3>Constructor Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colOne" scope="col">Constructor and Description</th>
</tr>
<tr class="altColor">
<td class="colOne"><code><span class="memberNameLink"><a href="../formes/Droite.html#Droite--">Droite</a></span>()</code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colOne"><code><span class="memberNameLink"><a href="../formes/Droite.html#Droite-formes.Point-formes.Point-">Droite</a></span>(<a href="../formes/Point.html" title="class in formes">Point</a>&nbsp;premier,
      <a href="../formes/Point.html" title="class in formes">Point</a>&nbsp;second)</code>&nbsp;</td>
</tr>
</table>
</li>
</ul>
<!-- ========== METHOD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="method.summary">
<!--   -->
</a>
<h3>Method Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Method and Description</th>
</tr>
<tr id="i0" class="altColor">
<td class="colFirst"><code>double</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../formes/Droite.html#approximativeDroit-int-double-">approximativeDroit</a></span>(int&nbsp;approx,
                  double&nbsp;d)</code>&nbsp;</td>
</tr>
<tr id="i1" class="rowColor">
<td class="colFirst"><code>double</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../formes/Droite.html#calculAngle-formes.Droite-">calculAngle</a></span>(<a href="../formes/Droite.html" title="class in formes">Droite</a>&nbsp;normal)</code>
<div class="block">la methode calculAngle
 
 cette méthode se base sur des calculs de trigoometrie.</div>
</td>
</tr>
<tr id="i2" class="altColor">
<td class="colFirst"><code>double</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../formes/Droite.html#calculLongueur--">calculLongueur</a></span>()</code>
<div class="block">la methode calculLongueur
 
Afin de calculer la longueur d'un segment, on applique la formule:
 √((Xb - Xa)² + (Yb - Ya)² + (Zb - Za)²)
</div>
</td>
</tr>
<tr id="i3" class="rowColor">
<td class="colFirst"><code><a href="../formes/Point.html" title="class in formes">Point</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../formes/Droite.html#getPrem--">getPrem</a></span>()</code>&nbsp;</td>
</tr>
<tr id="i4" class="altColor">
<td class="colFirst"><code><a href="../formes/Point.html" title="class in formes">Point</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../formes/Droite.html#getSec--">getSec</a></span>()</code>&nbsp;</td>
</tr>
<tr id="i5" class="rowColor">
<td class="colFirst"><code><a href="../formes/Point.html" title="class in formes">Point</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../formes/Droite.html#represPram-double-">represPram</a></span>(double&nbsp;t)</code>
<div class="block">la methode represPram 
 
        Cette méthode permet de créer la representation parametrique d'une droite.</div>
</td>
</tr>
<tr id="i6" class="altColor">
<td class="colFirst"><code>double</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../formes/Droite.html#trouveT-formes.Droite-">trouveT</a></span>(<a href="../formes/Droite.html" title="class in formes">Droite</a>&nbsp;d)</code>
<div class="block">la methode trouveT 
 
        Cette méthode permet de retrouver la valeur de t d'une representation parametrique de droite.</div>
</td>
</tr>
<tr id="i7" class="rowColor">
<td class="colFirst"><code><a href="../formes/Vecteur.html" title="class in formes">Vecteur</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../formes/Droite.html#vectCoordoA1--">vectCoordoA1</a></span>()</code>
<div class="block">la methode vectCoordoA1
 
Cette methode permet de renvoyer un vecteur dont la coordonné première est un pour facilité les calcul liée au calcul d'intersection.</div>
</td>
</tr>
<tr id="i8" class="altColor">
<td class="colFirst"><code><a href="../formes/Vecteur.html" title="class in formes">Vecteur</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../formes/Droite.html#vecteur--">vecteur</a></span>()</code>
<div class="block">la methode vecteur
 
Cette methode permet de renvoyer un vecteur.</div>
</td>
</tr>
<tr id="i9" class="rowColor">
<td class="colFirst"><code><a href="../formes/Vecteur.html" title="class in formes">Vecteur</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../formes/Droite.html#vecteurUnitair--">vecteurUnitair</a></span>()</code>
<div class="block">la methode vecteurUnitair 
 
        Un vecteur unitaire est un vecteur dont la norme vaut 1.</div>
</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.lang.Object">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
<code>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
<div class="details">
<ul class="blockList">
<li class="blockList">
<!-- ========= CONSTRUCTOR DETAIL ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.detail">
<!--   -->
</a>
<h3>Constructor Detail</h3>
<a name="Droite-formes.Point-formes.Point-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>Droite</h4>
<pre>public&nbsp;Droite(<a href="../formes/Point.html" title="class in formes">Point</a>&nbsp;premier,
              <a href="../formes/Point.html" title="class in formes">Point</a>&nbsp;second)</pre>
</li>
</ul>
<a name="Droite--">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>Droite</h4>
<pre>public&nbsp;Droite()</pre>
</li>
</ul>
</li>
</ul>
<!-- ============ METHOD DETAIL ========== -->
<ul class="blockList">
<li class="blockList"><a name="method.detail">
<!--   -->
</a>
<h3>Method Detail</h3>
<a name="vecteurUnitair--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>vecteurUnitair</h4>
<pre>public&nbsp;<a href="../formes/Vecteur.html" title="class in formes">Vecteur</a>&nbsp;vecteurUnitair()</pre>
<div class="block"><h1>la methode vecteurUnitair </h1>
 <p>
        Un vecteur unitaire est un vecteur dont la norme vaut 1. 
        Il nous sera util ici pour la rotation vectorielle,
        cette rotation dans un plan 3D étant défini par un angle et un vecteur unitaire
        donnant ainsi un sens de rotation et un angle de rotation le sens n'est pas nécessaire dans un plan 2D.
</p>
<p>
        Dans ctte méthode, on verifie que le vecteur ne soit pas unitaire, 
        si il ne l'est pas, on divise chaqune de ces valeurs (x, y, z) par sa norme et 
        on obtient ainsi le vecteur unitaire de la droite avec la quelle on a appelé la méthode.
</p></div>
</li>
</ul>
<a name="calculLongueur--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>calculLongueur</h4>
<pre>public&nbsp;double&nbsp;calculLongueur()</pre>
<div class="block"><h1>la methode calculLongueur</h1>
 <p>
Afin de calculer la longueur d'un segment, on applique la formule:
 √((Xb - Xa)² + (Yb - Ya)² + (Zb - Za)²)
</p></div>
</li>
</ul>
<a name="vecteur--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>vecteur</h4>
<pre>public&nbsp;<a href="../formes/Vecteur.html" title="class in formes">Vecteur</a>&nbsp;vecteur()</pre>
<div class="block"><h1>la methode vecteur</h1>
 <p>
Cette methode permet de renvoyer un vecteur. 
 Un vecteur se calcule selon la règle suivante: 
 u​⃗​​(Xb - Xa, Yb - Ya, Zb - Za)
</p></div>
</li>
</ul>
<a name="vectCoordoA1--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>vectCoordoA1</h4>
<pre>public&nbsp;<a href="../formes/Vecteur.html" title="class in formes">Vecteur</a>&nbsp;vectCoordoA1()</pre>
<div class="block"><h1>la methode vectCoordoA1</h1>
 <p>
Cette methode permet de renvoyer un vecteur dont la coordonné première est un pour facilité les calcul liée au calcul d'intersection. 
Problème lié a cette manière de faire: les calculs effectué sont sur des base de valeurs approximative. 
Ainsi le résultat final sera une approximation d'approximation.
Je me suis permise de faire ainsi car un ordinateur peu récupèrer un grand nombre de chiffre après la virgule et évité de trop gros équart entre la réalité et le calcul.
</p></div>
</li>
</ul>
<a name="approximativeDroit-int-double-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>approximativeDroit</h4>
<pre>public&nbsp;double&nbsp;approximativeDroit(int&nbsp;approx,
                                 double&nbsp;d)</pre>
</li>
</ul>
<a name="trouveT-formes.Droite-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>trouveT</h4>
<pre>public&nbsp;double&nbsp;trouveT(<a href="../formes/Droite.html" title="class in formes">Droite</a>&nbsp;d)</pre>
<div class="block"><h1>la methode trouveT </h1>
 <p>
        Cette méthode permet de retrouver la valeur de t d'une representation parametrique de droite.
 on cherche donc a exprimer t en fonction de t' puis t' en foction des valeurs(comme dans un systeme).
 De plus, on verifie que l'on divise pas par un zero, si tel est le cas, 
 on applique la règle des limites comme quoi, a/0+ = +infini, on donne donc a t' la valeur de 100000.
</p></div>
</li>
</ul>
<a name="represPram-double-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>represPram</h4>
<pre>public&nbsp;<a href="../formes/Point.html" title="class in formes">Point</a>&nbsp;represPram(double&nbsp;t)</pre>
<div class="block"><h1>la methode represPram </h1>
 <p>
        Cette méthode permet de créer la representation parametrique d'une droite.
        Cette representation nous est utile pour calculer le point d'intersection d'une droite et d'un plan. 
        Une fois le t rentrée, on récupère un point appartenant au plan dont l'equation a été utilisé pour retrouver t.
</p></div>
</li>
</ul>
<a name="calculAngle-formes.Droite-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>calculAngle</h4>
<pre>public&nbsp;double&nbsp;calculAngle(<a href="../formes/Droite.html" title="class in formes">Droite</a>&nbsp;normal)</pre>
<div class="block"><h1>la methode calculAngle</h1>
 <p>
 cette méthode se base sur des calculs de trigoometrie. 
on sait que le produit scalaire de deux vecteur vaut:
u​⃗​​.​v​⃗​​ = ∣∣​u​⃗​​∣∣ × ∣∣​v​⃗​​∣∣ × cosinus(​u​⃗​​,​v​⃗​​) mais aussi  u​⃗​​.​v​⃗​​ = xx' + yy' + zz'
 Ainsi, on calcul le scalaire des vecteurs des droites dont on veux récuperer l'angle.
 On le divise par la norme du premier vecteur fois celle du second.</div>
<dl>
<dt><span class="seeLabel">See Also:</span></dt>
<dd><code>Puis, on effectue un argcosinus du tout se qui nous permet de récuperer un angle en radiant.
 </p></code></dd>
</dl>
</li>
</ul>
<a name="getPrem--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getPrem</h4>
<pre>public&nbsp;<a href="../formes/Point.html" title="class in formes">Point</a>&nbsp;getPrem()</pre>
</li>
</ul>
<a name="getSec--">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>getSec</h4>
<pre>public&nbsp;<a href="../formes/Point.html" title="class in formes">Point</a>&nbsp;getSec()</pre>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<!-- ========= END OF CLASS DATA ========= -->
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a name="navbar.bottom">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.bottom.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../overview-summary.html">Overview</a></li>
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../deprecated-list.html">Deprecated</a></li>
<li><a href="../index-all.html">Index</a></li>
<li><a href="../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="../formes/Cylindre.html" title="class in formes"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
<li><a href="../formes/Executable.html" title="class in formes"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="../index.html?formes/Droite.html" target="_top">Frames</a></li>
<li><a href="Droite.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</body>
</html>
